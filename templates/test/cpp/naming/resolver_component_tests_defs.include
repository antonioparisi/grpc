<%def name="resolver_component_tests(tests)">#!/bin/bash
# Copyright 2015 gRPC authors.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

# This file is auto-generated

set -ex

# all command args required in this set order
FLAGS_test_bin_path=`echo "$1" | grep '\--test_bin_path=' | cut -d "=" -f 2`
FLAGS_dns_server_bin_path=`echo "$2" | grep '\--dns_server_bin_path=' | cut -d "=" -f 2`
FLAGS_records_config_path=`echo "$3" | grep '\--records_config_bin_path=' | cut -d "=" -f 2`

if [[ "$GRPC_DNS_RESOLVER" != "" && "$GRPC_DNS_RESOLVER" != ares ]]; then
  echo "This test only works under GRPC_DNS_RESOLVER=ares. Have GRPC_DNS_RESOLVER=$GRPC_DNS_RESOLVER" && exit 1
fi
export GRPC_DNS_RESOLVER=ares

DNS_PORT_OUTPUT_PATH="$(mktemp -d)/fifo"
mkfifo "$DNS_PORT_OUTPUT_PATH"
$FLAGS_dns_server_bin_path --records_config_path=$FLAGS_records_config_path --port_output_path="$DNS_PORT_OUTPUT_PATH" 2>&1 > /dev/null &
DNS_SERVER_PID=$!
echo "Local DNS server started. PID: $DNS_SERVER_PID"
DNS_PORT=`timeout 10 cat $DNS_PORT_OUTPUT_PATH | grep 'port=' | cut -d "=" -f 2`
if [[ "$DNS_PORT" == "" ]]; then echo "Failed to find out test DNS server port" && exit 1; fi

# Health check local DNS server TCP and UDP ports
for ((i=0;i<30;i++));
do
  echo "Retry health-check DNS query to local DNS server over tcp and udp"
  RETRY=0
  dig A health-check-local-dns-server-is-alive.resolver-tests.grpctestingexp. @localhost -p $DNS_PORT +tries=1 +timeout=1 | grep '123.123.123.123' || RETRY=1
  dig A health-check-local-dns-server-is-alive.resolver-tests.grpctestingexp. @localhost -p $DNS_PORT +tries=1 +timeout=1 +tcp | grep '123.123.123.123' || RETRY=1
  if [[ $RETRY == 0 ]]; then
    break
  fi;
  sleep 0.1
done

if [[ $RETRY == 1 ]]; then
  echo "FAILED TO START LOCAL DNS SERVER"
  kill -SIGTERM $DNS_SERVER_PID
  wait
  exit 1
fi

function terminate_all {
  kill -SIGTERM $!
  kill -SIGTERM $DNS_SERVER_PID
  wait
  exit 1
}

trap terminate_all SIGTERM
EXIT_CODE=0
# TODO: this test should check for GCE residency and skip tests using _grpclb._tcp.* SRV records once GCE residency checks are made
# in the resolver.

% for test in tests:
$FLAGS_test_bin_path \\

  --target_name='${test['target_name']}' \\

  --expected_addrs='${test['expected_addrs']}' \\

  --expected_chosen_service_config='${test['expected_chosen_service_config']}' \\

  --expected_lb_policy='${test['expected_lb_policy']}' \\

  --local_dns_server_address=127.0.0.1:$DNS_PORT &
wait $! || EXIT_CODE=1

% endfor
kill -SIGTERM $DNS_SERVER_PID
wait
exit $EXIT_CODE</%def>
