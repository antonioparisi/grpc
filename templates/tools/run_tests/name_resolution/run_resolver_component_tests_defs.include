<%def name="run_resolver_component_tests(tests)">#!/bin/bash
# Copyright 2015 gRPC authors.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

# This file is auto-generated

set -ex

# change to grpc repo root
cd $(dirname $0)/../../..

DNS_PORT="$1"
TEST_BIN_DIR="$2"

echo "Directory of test binary relative to repo root is: |$TEST_BIN_DIR|"
echo "Start a local DNS server in the background on port $DNS_PORT"
tools/run_tests/python_utils/dns_server.py --dns_port="$DNS_PORT" 2>&1 > /dev/null &
DNS_SERVER_PID=$!
echo "Local DNS server started. PID: $DNS_SERVER_PID"

# Health check local DNS server TCP and UDP ports
for ((i=0;i<30;i++));
do
  echo "Retry health-check DNS query to local DNS server over tcp and udp"
  RETRY=0
  dig A local-dns-server-is-alive.test-local-dns-server.grpctestingexp. @localhost -p $DNS_PORT +tries=1 +timeout=1 | grep '123.123.123.123' || RETRY=1
  dig A local-dns-server-is-alive.test-local-dns-server.grpctestingexp. @localhost -p $DNS_PORT +tries=1 +timeout=1 +tcp | grep '123.123.123.123' || RETRY=1
  if [[ $RETRY == 0 ]]; then
    break
  fi;
  sleep 0.1
done

if [[ $RETRY == 1 ]]; then
  echo "FAILED TO START LOCAL DNS SERVER"
  kill -SIGTERM $DNS_SERVER_PID
  wait
  exit 1
fi

function terminate_all {
  kill -SIGTERM $!
  kill -SIGTERM $DNS_SERVER_PID
  wait
  exit 1
}

trap terminate_all SIGTERM
EXIT_CODE=0

% for test in tests:
$TEST_BIN_DIR/resolver_component_test \\

  --target_name='${test['target_name']}' \\

  --expected_addrs='${test['expected_addrs']}' \\

  --expected_chosen_service_config='${test['expected_chosen_service_config']}' \\

  --expected_lb_policy='${test['expected_lb_policy']}' \\

  --local_dns_server_address=127.0.0.1:$DNS_PORT &
wait $! || EXIT_CODE=1

% endfor
kill -SIGTERM $DNS_SERVER_PID
wait
exit $EXIT_CODE</%def>
